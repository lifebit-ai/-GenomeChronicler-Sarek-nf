/*
 * -------------------------------------------------
 *  nf-core/sarek Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performance compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  shell = ['/bin/bash', '-euo', 'pipefail']

  errorStrategy = {task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish'}
  maxErrors = '-1'
  maxRetries = 3

  withLabel:cpus_1 {
    cpus = {check_resource(1)}
    memory = 7.5.GB
  }
  withLabel:cpus_2 {
    cpus = {check_resource(2)}
    memory = 15.GB
  }
  withLabel:cpus_4 {
    cpus = {check_resource(4)}
    memory = 20.GB
  }
  withLabel:cpus_8 {
    cpus = {check_resource(8)}
  }
  withLabel:cpus_16 {
    cpus = {check_resource(16)}
  }
  withLabel:cpus_max {
    cpus = {params.max_cpus}
  }
  withLabel:memory_max {
    memory = {params.max_memory}
  }
    withName: MarkDuplicates {
      maxForks = 2
  }
  withName: BaseRecalibrator {
    maxForks = 32
  }
  withName: ApplyBQSRS {
    maxForks = 32
  }
  withName: ScatterIntervalList {
    container = 'us.gcr.io/broad-gotc-prod/genomes-in-the-cloud:2.4.1-1540490856'
  }
  withName: HaplotypeCaller {
    cpus = {check_resource(1)}
    memory = 7.5.GB
    maxForks = 30
    }
  withName:ConcatVCF {
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
  withLabel:FastQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:MultiQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:Snpeff {
    container = {(params.annotation_cache && params.snpEff_cache) ? 'nfcore/sarek:2.5.2' : "nfcore/sareksnpeff:2.5.2.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withLabel:VEP {
    container = {(params.annotation_cache && params.vep_cache) ? 'nfcore/sarek:2.5.2' : "nfcore/sarekvep:2.5.2.${params.genome.minus('small')}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withLabel:med_resources {
    cpus = {alloc_med_resource(params.max_cpus)}
    memory = {alloc_med_resource(params.memory)}
  }
  withLabel:GenomeChronicler {
    container = 'lifebitai/genomechronicler:pgp-uk-5513c6f'
  }
}
